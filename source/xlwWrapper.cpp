//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include <xlw/MyContainers.h>
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <ctime>
namespace {
const char* LibraryName = "CreasysXVALibrary";
};

// dummy function to force linkage
namespace {
void DummyFunction()
{
xlAutoOpen();
xlAutoClose();
}
}

// registrations start here


namespace
{
XLRegistration::Arg
getInterpolationsArgs[]=
{
{ "data1","too lazy to comment this one ","XLF_OPER"},
{ "data2","too lazy to comment this one ","XLF_OPER"},
{ "arg","too lazy to comment this one ","B"},
{ "type","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetInterpolations("xlgetInterpolations",
"getInterpolations",
"Realiza Interpolacion: Cubic, Clamped or Lineal interpolations depend on type. ",
LibraryName,
getInterpolationsArgs,
4
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetInterpolations(
LPXLFOPER data1a,
LPXLFOPER data2a,
double arg,
double typea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper data1b(
	(data1a));
MyArray data1(
	data1b.AsArray("data1"));

XlfOper data2b(
	(data2a));
MyArray data2(
	data2b.AsArray("data2"));


unsigned long type(
	static_cast<unsigned long>(typea));

double result(
	getInterpolations(
		data1,
		data2,
		arg,
		type)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
testInsertDataArgs[]=
{
{ "whatever","cualquier cosa para que parta ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registertestInsertData("xltestInsertData",
"testInsertData",
"Prueba el uso de SQLITE ",
LibraryName,
testInsertDataArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xltestInsertData(
double whatever)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	testInsertData(
		whatever)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertFxArgs[]=
{
{ "valores","El rango de FXs ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertFx("xlinsertFx",
"insertFx",
"Inserta los FXa ",
LibraryName,
insertFxArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertFx(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertFx(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
testStringArgs[]=
{
{ "input","Matriz de Fx iniciales ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registertestString("xltestString",
"testString",
"Inserta Fx iniciales a la BBDD ",
LibraryName,
testStringArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xltestString(
LPXLFOPER inputa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper inputb(
	(inputa));
CellMatrix input(
	inputb.AsCellMatrix("input"));

CellMatrix result(
	testString(
		input)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertCurvasArgs[]=
{
{ "valores","Matriz con las curvas iniciales ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertCurvas("xlinsertCurvas",
"insertCurvas",
"Inserta Curvas Cup n Cero inciales a la BBDD ",
LibraryName,
insertCurvasArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertCurvas(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertCurvas(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertOperationsArgs[]=
{
{ "valores","Rango con todas las operaciones ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertOperations("xlinsertOperations",
"insertOperations",
"Inserta operaciones ",
LibraryName,
insertOperationsArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertOperations(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertOperations(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertQueFactoresArgs[]=
{
{ "queFactores","Rango con los factores ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertQueFactores("xlinsertQueFactores",
"insertQueFactores",
"Inserta factores a simular ",
LibraryName,
insertQueFactoresArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertQueFactores(
LPXLFOPER queFactoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper queFactoresb(
	(queFactoresa));
CellMatrix queFactores(
	queFactoresb.AsCellMatrix("queFactores"));

double result(
	insertQueFactores(
		queFactores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
valueFwdArgs[]=
{
{ "number","DealNumber de la operaci n ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registervalueFwd("xlvalueFwd",
"valueFwd",
"Valoriza una operacion ",
LibraryName,
valueFwdArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlvalueFwd(
double numbera)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int number(
	static_cast<int>(numbera));

double result(
	valueFwd(
		number)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertMonedaBaseArgs[]=
{
{ "monedaBase","Identificador de la moneda base ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertMonedaBase("xlinsertMonedaBase",
"insertMonedaBase",
"Inserta la moneda base ",
LibraryName,
insertMonedaBaseArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertMonedaBase(
LPXLFOPER monedaBasea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper monedaBaseb(
	(monedaBasea));
std::string monedaBase(
	monedaBaseb.AsString("monedaBase"));

double result(
	insertMonedaBase(
		monedaBase)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertVectorArgs[]=
{
{ "valores","vector de valores ","XLF_OPER"},
{ "destino","tabla de destino ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertVector("xlinsertVector",
"insertVector",
"Inserta vectores de datos del tipo (nombre, valor) en la tabla destino ",
LibraryName,
insertVectorArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertVector(
LPXLFOPER valoresa,
LPXLFOPER destinoa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

XlfOper destinob(
	(destinoa));
std::string destino(
	destinob.AsString("destino"));

double result(
	insertVector(
		valores,
		destino)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getMonedaBaseArgs[]=
{
 { "","" } 
};
  XLRegistration::XLFunctionRegistrationHelper
registergetMonedaBase("xlgetMonedaBase",
"getMonedaBase",
"too lazy to comment this function ",
LibraryName,
getMonedaBaseArgs,
0
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetMonedaBase(
)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

std::string result(
	getMonedaBase());
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertParamDeSimulacionArgs[]=
{
{ "horizonte","Horizonte de simulaci n ","B"},
{ "numSimulaciones","N mero de simulaciones ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertParamDeSimulacion("xlinsertParamDeSimulacion",
"insertParamDeSimulacion",
"Inserta Horizonte y Numero de Siumulaciones ",
LibraryName,
insertParamDeSimulacionArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertParamDeSimulacion(
double horizonte,
double numSimulacionesa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


unsigned long numSimulaciones(
	static_cast<unsigned long>(numSimulacionesa));

double result(
	insertParamDeSimulacion(
		horizonte,
		numSimulaciones)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
startSimulationArgs[]=
{
 { "","" } 
};
  XLRegistration::XLFunctionRegistrationHelper
registerstartSimulation("xlstartSimulation",
"startSimulation",
"Hace comenzar la simulacion ",
LibraryName,
startSimulationArgs,
0
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlstartSimulation(
)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

double result(
	startSimulation());
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getSimulacionesArgs[]=
{
{ "factor","Factor elegido ","XLF_OPER"},
{ "cuantasSim","Cuantas simulaciones debe devolver ","B"},
{ "horizonte","Maximo plazo de las simulaciones ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetSimulaciones("xlgetSimulaciones",
"getSimulaciones",
"Devuelve un numero de simulaciones de un factor ",
LibraryName,
getSimulacionesArgs,
3
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetSimulaciones(
LPXLFOPER factora,
double cuantasSima,
double horizonte)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper factorb(
	(factora));
std::string factor(
	factorb.AsString("factor"));

int cuantasSim(
	static_cast<int>(cuantasSima));


MyMatrix result(
	getSimulaciones(
		factor,
		cuantasSim,
		horizonte)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertDealNumberNettingSetArgs[]=
{
{ "valores","Rango de valores ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertDealNumberNettingSet("xlinsertDealNumberNettingSet",
"insertDealNumberNettingSet",
"Inserta la relaci n Deal Number - Netting Set en BBDD ",
LibraryName,
insertDealNumberNettingSetArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertDealNumberNettingSet(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertDealNumberNettingSet(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertMonedaCurvaArgs[]=
{
{ "valores","Rango de valores ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertMonedaCurva("xlinsertMonedaCurva",
"insertMonedaCurva",
"Inserta la relaci n moneda-curva de descuento ",
LibraryName,
insertMonedaCurvaArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertMonedaCurva(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertMonedaCurva(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertInstitutionArgs[]=
{
{ "probDefault","Probabilidad de default ","B"},
{ "recovRate","Tasa de recuperacion ","B"},
{ "spreadCap","Spread captacion ","B"},
{ "spreadCol","Spread colocacion ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertInstitution("xlinsertInstitution",
"insertInstitution",
"Inserta prob. de default y tasa de recuperacion de institucion ",
LibraryName,
insertInstitutionArgs,
4
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertInstitution(
double probDefault,
double recovRate,
double spreadCap,
double spreadCol)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);





double result(
	insertInstitution(
		probDefault,
		recovRate,
		spreadCap,
		spreadCol)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertCustomAmortArgs[]=
{
{ "valores","Rango de valores ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertCustomAmort("xlinsertCustomAmort",
"insertCustomAmort",
"too lazy to comment this function ",
LibraryName,
insertCustomAmortArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertCustomAmort(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertCustomAmort(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
startValorizacionArgs[]=
{
{ "nettingSets","Netting Sets a valorizar ","XLF_OPER"},
{ "stopTimes","En que tiempos vamos a valorizar ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerstartValorizacion("xlstartValorizacion",
"startValorizacion",
"Comienza el proceso de valorizaci n de los netting sets escogidos ",
LibraryName,
startValorizacionArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlstartValorizacion(
LPXLFOPER nettingSetsa,
LPXLFOPER stopTimesa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nettingSetsb(
	(nettingSetsa));
CellMatrix nettingSets(
	nettingSetsb.AsCellMatrix("nettingSets"));

XlfOper stopTimesb(
	(stopTimesa));
MyArray stopTimes(
	stopTimesb.AsArray("stopTimes"));

double result(
	startValorizacion(
		nettingSets,
		stopTimes)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
startMetricasArgs[]=
{
{ "nettingSets","Netting Sets ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerstartMetricas("xlstartMetricas",
"startMetricas",
"Comienza el c lculo de las  m tricas de exposicion para los netting sets escogidos. ",
LibraryName,
startMetricasArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlstartMetricas(
LPXLFOPER nettingSetsa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nettingSetsb(
	(nettingSetsa));
CellMatrix nettingSets(
	nettingSetsb.AsCellMatrix("nettingSets"));

double result(
	startMetricas(
		nettingSets)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
startExposicionCrediticiaArgs[]=
{
{ "nettingSets","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerstartExposicionCrediticia("xlstartExposicionCrediticia",
"startExposicionCrediticia",
" Comienza el c lculo del CVA y los otrs indicadores de exposici n para los netting sets escogidos. ",
LibraryName,
startExposicionCrediticiaArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlstartExposicionCrediticia(
LPXLFOPER nettingSetsa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nettingSetsb(
	(nettingSetsa));
CellMatrix nettingSets(
	nettingSetsb.AsCellMatrix("nettingSets"));

double result(
	startExposicionCrediticia(
		nettingSets)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertNettingSetsArgs[]=
{
{ "valores","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertNettingSets("xlinsertNettingSets",
"insertNettingSets",
"Inserta la descripci n de los netting sets ",
LibraryName,
insertNettingSetsArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertNettingSets(
LPXLFOPER valoresa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper valoresb(
	(valoresa));
CellMatrix valores(
	valoresb.AsCellMatrix("valores"));

double result(
	insertNettingSets(
		valores)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertValorPercentilArgs[]=
{
{ "valorPercentil","Valor del percentil ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertValorPercentil("xlinsertValorPercentil",
"insertValorPercentil",
"Inserta el valor del precentil a usar para las m tricas ",
LibraryName,
insertValorPercentilArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertValorPercentil(
double valorPercentil)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	insertValorPercentil(
		valorPercentil)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getValorizacionesArgs[]=
{
{ "nombreNS"," Netting set elegido ","XLF_OPER"},
{ "cuantasVal"," Cuantas valorizaciones debe devolver ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetValorizaciones("xlgetValorizaciones",
"getValorizaciones",
" Devuelve un numero de valorizaciones para un netting set ",
LibraryName,
getValorizacionesArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetValorizaciones(
LPXLFOPER nombreNSa,
double cuantasVala)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nombreNSb(
	(nombreNSa));
string nombreNS(
	nombreNSb.AsString("nombreNS"));

int cuantasVal(
	static_cast<int>(cuantasVala));

MyMatrix result(
	getValorizaciones(
		nombreNS,
		cuantasVal)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getMetricasArgs[]=
{
{ "nombreNS"," Netting set elegido ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetMetricas("xlgetMetricas",
"getMetricas",
" Devuelve el valor de las metricas de exposicion para los distintos escenarios ",
LibraryName,
getMetricasArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetMetricas(
LPXLFOPER nombreNSa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nombreNSb(
	(nombreNSa));
string nombreNS(
	nombreNSb.AsString("nombreNS"));

MyMatrix result(
	getMetricas(
		nombreNS)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getDiscountFactorFromCurvaArgs[]=
{
{ "nombreCurva"," Curva elegida ","XLF_OPER"},
{ "t"," tiempo ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetDiscountFactorFromCurva("xlgetDiscountFactorFromCurva",
"getDiscountFactorFromCurva",
" Devuelve el factor de descuento, al tiempo t para una curva ",
LibraryName,
getDiscountFactorFromCurvaArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetDiscountFactorFromCurva(
LPXLFOPER nombreCurvaa,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nombreCurvab(
	(nombreCurvaa));
string nombreCurva(
	nombreCurvab.AsString("nombreCurva"));


double result(
	getDiscountFactorFromCurva(
		nombreCurva,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getCreditExposureResultsArgs[]=
{
{ "nombreNS"," Netting set elegido ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetCreditExposureResults("xlgetCreditExposureResults",
"getCreditExposureResults",
" Devuelve el resultado de: Unilateral CVA, CVA, DVA, BilateralCVA, FVA, PFEMaxima y EPE. ",
LibraryName,
getCreditExposureResultsArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetCreditExposureResults(
LPXLFOPER nombreNSa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nombreNSb(
	(nombreNSa));
string nombreNS(
	nombreNSb.AsString("nombreNS"));

MyMatrix result(
	getCreditExposureResults(
		nombreNS)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
insertParamDeValorizacionArgs[]=
{
{ "nettingSets","Netting Sets a valorizar ","XLF_OPER"},
{ "stopTimes","En que tiempos vamos a valorizar ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerinsertParamDeValorizacion("xlinsertParamDeValorizacion",
"insertParamDeValorizacion",
"Guarda los par metros de valorizaci n ",
LibraryName,
insertParamDeValorizacionArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlinsertParamDeValorizacion(
LPXLFOPER nettingSetsa,
LPXLFOPER stopTimesa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nettingSetsb(
	(nettingSetsa));
CellMatrix nettingSets(
	nettingSetsb.AsCellMatrix("nettingSets"));

XlfOper stopTimesb(
	(stopTimesa));
MyArray stopTimes(
	stopTimesb.AsArray("stopTimes"));

double result(
	insertParamDeValorizacion(
		nettingSets,
		stopTimes)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
legSwapsArgs[]=
{
{ "nombreNS","too lazy to comment this one ","XLF_OPER"},
{ "stopTimes","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerlegSwaps("xllegSwaps",
"legSwaps",
"too lazy to comment this function ",
LibraryName,
legSwapsArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xllegSwaps(
LPXLFOPER nombreNSa,
LPXLFOPER stopTimesa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper nombreNSb(
	(nombreNSa));
string nombreNS(
	nombreNSb.AsString("nombreNS"));

XlfOper stopTimesb(
	(stopTimesa));
MyArray stopTimes(
	stopTimesb.AsArray("stopTimes"));

double result(
	legSwaps(
		nombreNS,
		stopTimes)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
startValorizacionExeArgs[]=
{
 { "","" } 
};
  XLRegistration::XLFunctionRegistrationHelper
registerstartValorizacionExe("xlstartValorizacionExe",
"startValorizacionExe",
"too lazy to comment this function ",
LibraryName,
startValorizacionExeArgs,
0
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlstartValorizacionExe(
)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

double result(
	startValorizacionExe());
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
getValueSwapFromDealNumberArgs[]=
{
{ "dealNumber","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registergetValueSwapFromDealNumber("xlgetValueSwapFromDealNumber",
"getValueSwapFromDealNumber",
"too lazy to comment this function ",
LibraryName,
getValueSwapFromDealNumberArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetValueSwapFromDealNumber(
LPXLFOPER dealNumbera)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper dealNumberb(
	(dealNumbera));
CellMatrix dealNumber(
	dealNumberb.AsCellMatrix("dealNumber"));

double result(
	getValueSwapFromDealNumber(
		dealNumber)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

